// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var _a;
import * as Core from "./core.mjs";
import * as Errors from "./error.mjs";
import * as Uploads from "./uploads.mjs";
import * as API from "./resources/index.mjs";
import { Credits } from "./resources/credits.mjs";
import { Ping } from "./resources/ping.mjs";
import { Generations, } from "./resources/generations/generations.mjs";
/**
 * API Client for interfacing with the LumaAI API.
 */
export class LumaAI extends Core.APIClient {
    /**
     * API Client for interfacing with the LumaAI API.
     *
     * @param {string | undefined} [opts.authToken=process.env['LUMAAI_API_KEY'] ?? undefined]
     * @param {string} [opts.baseURL=process.env['LUMAAI_BASE_URL'] ?? https://api.lumalabs.ai/dream-machine/v1] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('LUMAAI_BASE_URL'), authToken = Core.readEnv('LUMAAI_API_KEY'), ...opts } = {}) {
        if (authToken === undefined) {
            throw new Errors.LumaAIError("The LUMAAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the LumaAI client with an authToken option, like new LumaAI({ authToken: 'My Auth Token' }).");
        }
        const options = {
            authToken,
            ...opts,
            baseURL: baseURL || `https://api.lumalabs.ai/dream-machine/v1`,
        };
        super({
            baseURL: options.baseURL,
            timeout: options.timeout ?? 60000 /* 1 minute */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.generations = new API.Generations(this);
        this.ping = new API.Ping(this);
        this.credits = new API.Credits(this);
        this._options = options;
        this.authToken = authToken;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { Authorization: `Bearer ${this.authToken}` };
    }
}
_a = LumaAI;
LumaAI.LumaAI = _a;
LumaAI.DEFAULT_TIMEOUT = 60000; // 1 minute
LumaAI.LumaAIError = Errors.LumaAIError;
LumaAI.APIError = Errors.APIError;
LumaAI.APIConnectionError = Errors.APIConnectionError;
LumaAI.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
LumaAI.APIUserAbortError = Errors.APIUserAbortError;
LumaAI.NotFoundError = Errors.NotFoundError;
LumaAI.ConflictError = Errors.ConflictError;
LumaAI.RateLimitError = Errors.RateLimitError;
LumaAI.BadRequestError = Errors.BadRequestError;
LumaAI.AuthenticationError = Errors.AuthenticationError;
LumaAI.InternalServerError = Errors.InternalServerError;
LumaAI.PermissionDeniedError = Errors.PermissionDeniedError;
LumaAI.UnprocessableEntityError = Errors.UnprocessableEntityError;
LumaAI.toFile = Uploads.toFile;
LumaAI.fileFromPath = Uploads.fileFromPath;
LumaAI.Generations = Generations;
LumaAI.Ping = Ping;
LumaAI.Credits = Credits;
export { toFile, fileFromPath } from "./uploads.mjs";
export { LumaAIError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from "./error.mjs";
export default LumaAI;
//# sourceMappingURL=index.mjs.map